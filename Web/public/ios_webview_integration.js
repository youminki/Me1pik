/**
 * üçé iOS ÏõπÎ∑∞ ÏûêÎèôÎ°úÍ∑∏Ïù∏ ÌÜµÌï© Ïä§ÌÅ¨Î¶ΩÌä∏
 * iOS Safari ITP(Intelligent Tracking Prevention) ÎåÄÏùë
 * ÏõπÎ∑∞ÏôÄ ÎÑ§Ïù¥Ìã∞Î∏å Ïï± Í∞Ñ ÌÜ†ÌÅ∞ ÎèôÍ∏∞Ìôî
 */

(function () {
  'use strict';

  console.log('üçé iOS ÏõπÎ∑∞ ÏûêÎèôÎ°úÍ∑∏Ïù∏ ÌÜµÌï© Ïä§ÌÅ¨Î¶ΩÌä∏ Î°úÎìúÎê®');

  // iOS ÌôòÍ≤Ω Í∞êÏßÄ
  const isIOS = () => {
    // iOS ÏõπÎ∑∞ Í∞êÏßÄ
    if (window.webkit?.messageHandlers) return true;

    // iOS Safari Í∞êÏßÄ
    const userAgent = navigator.userAgent.toLowerCase();
    return (
      /iphone|ipad|ipod/.test(userAgent) || /ipad/.test(navigator.platform)
    );
  };

  // iOS ÌôòÍ≤ΩÏù¥ ÏïÑÎãàÎ©¥ Ïä§ÌÅ¨Î¶ΩÌä∏ Ï¢ÖÎ£å
  if (!isIOS()) {
    console.log('üçé iOS ÌôòÍ≤ΩÏù¥ ÏïÑÎãò - Ïä§ÌÅ¨Î¶ΩÌä∏ Ï¢ÖÎ£å');
    return;
  }

  console.log('üçé iOS ÌôòÍ≤Ω Í∞êÏßÄÎê® - iOS ÏµúÏ†ÅÌôîÎêú ÏûêÎèôÎ°úÍ∑∏Ïù∏ ÏÑ§Ï†ï');

  // üéØ iOSÏóêÏÑú ÏïàÏ†ïÏ†ÅÏù∏ ÌÜ†ÌÅ∞ Ï†ÄÏû• Ìï®Ïàò
  const saveTokenForIOS = (token, refreshToken, keepLogin = true) => {
    try {
      console.log('üçé iOS: 30Ïùº ÏûêÎèôÎ°úÍ∑∏Ïù∏ ÌÜ†ÌÅ∞ Ï†ÄÏû• ÏãúÏûë');

      // 1. Ïø†ÌÇ§Ïóê Ïö∞ÏÑ† Ï†ÄÏû• (iOS ITP ÎåÄÏùë, 30Ïùº Ïú†ÏßÄ)
      const cookieOptions = {
        path: '/',
        secure: window.location.protocol === 'https:',
        sameSite: 'strict',
        expires: keepLogin ? 30 : 1, // 30Ïùº ÎòêÎäî 1Ïùº
      };

      document.cookie = `accessToken=${token}; path=${cookieOptions.path}; max-age=${cookieOptions.expires * 24 * 60 * 60}`;
      if (refreshToken) {
        document.cookie = `refreshToken=${refreshToken}; path=${cookieOptions.path}; max-age=${cookieOptions.expires * 24 * 60 * 60}`;
      }
      console.log('üç™ iOS: Ïø†ÌÇ§Ïóê ÌÜ†ÌÅ∞ Ï†ÄÏû• ÏôÑÎ£å (30Ïùº ÎòêÎäî 1Ïùº)');

      // 2. sessionStorageÏóê Ï†ÄÏû• (iOSÏóêÏÑú ÏïàÏ†ïÏ†Å, 30Ïùº Ïú†ÏßÄ)
      sessionStorage.setItem('accessToken', token);
      if (refreshToken) {
        sessionStorage.setItem('refreshToken', refreshToken);
      }
      sessionStorage.setItem('isLoggedIn', 'true');
      sessionStorage.setItem('keepLoginSetting', keepLogin.toString());
      console.log('üì± iOS: sessionStorageÏóê ÌÜ†ÌÅ∞ Ï†ÄÏû• ÏôÑÎ£å (30Ïùº ÎòêÎäî 1Ïùº)');

      // 3. localStorageÏóêÎèÑ Ï†ÄÏû• (30Ïùº Î∞±ÏóÖ, Î∏åÎùºÏö∞Ï†Ä Ï¢ÖÎ£å ÌõÑÏóêÎèÑ Ïú†ÏßÄ)
      if (keepLogin) {
        localStorage.setItem('accessToken', token);
        if (refreshToken) {
          localStorage.setItem('refreshToken', refreshToken);
        }
        localStorage.setItem('isLoggedIn', 'true');
        localStorage.setItem('keepLoginSetting', keepLogin.toString());
        localStorage.setItem('autoLogin', 'true');
        localStorage.setItem('persistentLogin', 'true');
        localStorage.setItem('loginTimestamp', Date.now().toString());

        // 30Ïùº ÎßåÎ£å ÏãúÍ∞Ñ ÏÑ§Ï†ï
        const thirtyDaysFromNow = new Date();
        thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);
        localStorage.setItem('tokenExpiresAt', thirtyDaysFromNow.toISOString());

        console.log('üíæ iOS: localStorageÏóê ÌÜ†ÌÅ∞ Ï†ÄÏû• ÏôÑÎ£å (30Ïùº ÏûêÎèôÎ°úÍ∑∏Ïù∏)');
        console.log('üìÖ ÎßåÎ£å ÏãúÍ∞Ñ:', thirtyDaysFromNow.toLocaleDateString());
      } else {
        // 1Ïùº ÎßåÎ£å ÏãúÍ∞Ñ ÏÑ§Ï†ï
        const oneDayFromNow = new Date();
        oneDayFromNow.setDate(oneDayFromNow.getDate() + 1);
        sessionStorage.setItem('tokenExpiresAt', oneDayFromNow.toISOString());

        console.log('üì± iOS: sessionStorageÏóê ÌÜ†ÌÅ∞ Ï†ÄÏû• ÏôÑÎ£å (1Ïùº ÏÑ∏ÏÖò)');
        console.log('üìÖ ÎßåÎ£å ÏãúÍ∞Ñ:', oneDayFromNow.toLocaleDateString());
      }

      // 4. iOS Ïï±Ïóê ÌÜ†ÌÅ∞ ÎèôÍ∏∞Ìôî ÏöîÏ≤≠
      if (window.webkit?.messageHandlers?.nativeBridge) {
        window.webkit.messageHandlers.nativeBridge.postMessage({
          action: 'syncToken',
          token: token,
          refreshToken: refreshToken,
          keepLogin: keepLogin,
        });
        console.log('üçé iOS: ÎÑ§Ïù¥Ìã∞Î∏å Ïï±Ïóê ÌÜ†ÌÅ∞ ÎèôÍ∏∞Ìôî ÏöîÏ≤≠');
      }

      console.log('‚úÖ iOS ÌÜ†ÌÅ∞ Ï†ÄÏû• ÏôÑÎ£å (30Ïùº ÏûêÎèôÎ°úÍ∑∏Ïù∏)');
      console.log('üìä Ï†ÄÏû• Í≤∞Í≥º:', {
        keepLogin,
        expiryDate: keepLogin
          ? new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toLocaleDateString()
          : new Date(Date.now() + 24 * 60 * 60 * 1000).toLocaleDateString(),
      });
    } catch (error) {
      console.error('iOS ÌÜ†ÌÅ∞ Ï†ÄÏû• Ï§ë Ïò§Î•ò:', error);
    }
  };

  // üéØ iOSÏóêÏÑú ÏïàÏ†ïÏ†ÅÏù∏ ÌÜ†ÌÅ∞ ÏùΩÍ∏∞ Ìï®Ïàò
  const getTokenForIOS = () => {
    try {
      // 1. Ïø†ÌÇ§ÏóêÏÑú Ïö∞ÏÑ† ÏùΩÍ∏∞ (iOS ITP ÎåÄÏùë)
      const cookieToken = document.cookie
        .split('; ')
        .find((row) => row.startsWith('accessToken='))
        ?.split('=')[1];

      if (cookieToken) {
        console.log('üç™ iOS: Ïø†ÌÇ§ÏóêÏÑú ÌÜ†ÌÅ∞ ÏùΩÍ∏∞ ÏÑ±Í≥µ');
        return cookieToken;
      }

      // 2. sessionStorageÏóêÏÑú ÏùΩÍ∏∞ (iOSÏóêÏÑú ÏïàÏ†ïÏ†Å)
      const sessionToken = sessionStorage.getItem('accessToken');
      if (sessionToken) {
        console.log('üì± iOS: sessionStorageÏóêÏÑú ÌÜ†ÌÅ∞ ÏùΩÍ∏∞ ÏÑ±Í≥µ');
        return sessionToken;
      }

      // 3. localStorageÏóêÏÑú ÏùΩÍ∏∞ (Î∞±ÏóÖ)
      const localToken = localStorage.getItem('accessToken');
      if (localToken) {
        console.log('üíæ iOS: localStorageÏóêÏÑú ÌÜ†ÌÅ∞ ÏùΩÍ∏∞ ÏÑ±Í≥µ');
        return localToken;
      }

      console.log('‚ùå iOS: Î™®Îì† Ï†ÄÏû•ÏÜåÏóêÏÑú ÌÜ†ÌÅ∞ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå');
      return null;
    } catch (error) {
      console.error('iOS ÌÜ†ÌÅ∞ ÏùΩÍ∏∞ Ï§ë Ïò§Î•ò:', error);
      return null;
    }
  };

  // üéØ iOS ÏõπÎ∑∞ Îã´Ìûò Ïãú 30Ïùº ÏûêÎèôÎ°úÍ∑∏Ïù∏ Î≥¥Ïû•
  window.addEventListener('beforeunload', function (e) {
    console.log('üîÑ iOS ÏõπÎ∑∞ Îã´Ìûò Í∞êÏßÄ - 30Ïùº ÏûêÎèôÎ°úÍ∑∏Ïù∏ Î≥¥Ïû• ÏãúÏûë');

    // keepLogin ÏÑ§Ï†ï ÌôïÏù∏
    const keepLogin = localStorage.getItem('keepLoginSetting') === 'true';

    if (keepLogin) {
      // 30Ïùº ÏûêÎèôÎ°úÍ∑∏Ïù∏Ïù¥ ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞ ÌÜ†ÌÅ∞ Ï†ÄÏû• Î≥¥Ïû•
      const accessToken =
        localStorage.getItem('accessToken') ||
        sessionStorage.getItem('accessToken');
      const refreshToken =
        localStorage.getItem('refreshToken') ||
        sessionStorage.getItem('refreshToken');

      if (accessToken) {
        // localStorageÏóê 30Ïùº ÌÜ†ÌÅ∞ Ï†ÄÏû• Î≥¥Ïû•
        localStorage.setItem('accessToken', accessToken);
        if (refreshToken) {
          localStorage.setItem('refreshToken', refreshToken);
        }
        localStorage.setItem('isLoggedIn', 'true');
        localStorage.setItem('autoLogin', 'true');
        localStorage.setItem('persistentLogin', 'true');
        localStorage.setItem('loginTimestamp', Date.now().toString());

        // 30Ïùº ÎßåÎ£å ÏãúÍ∞Ñ ÏÑ§Ï†ï
        const thirtyDaysFromNow = new Date();
        thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);
        localStorage.setItem('tokenExpiresAt', thirtyDaysFromNow.toISOString());

        // iOS Ïï±Ïóê ÌÜ†ÌÅ∞ ÎèôÍ∏∞Ìôî ÏöîÏ≤≠ (ÏõπÎ∑∞ Îã´Ìûò Ïãú)
        if (window.webkit?.messageHandlers?.nativeBridge) {
          window.webkit.messageHandlers.nativeBridge.postMessage({
            action: 'syncTokenOnUnload',
            token: accessToken,
            refreshToken: refreshToken,
            keepLogin: keepLogin,
          });
          console.log('üçé iOS: ÏõπÎ∑∞ Îã´Ìûò Ïãú ÎÑ§Ïù¥Ìã∞Î∏å Ïï±Ïóê ÌÜ†ÌÅ∞ ÎèôÍ∏∞Ìôî ÏöîÏ≤≠');
        }

        console.log('üíæ iOS ÏõπÎ∑∞ Îã´Ìûò Ïãú 30Ïùº ÏûêÎèôÎ°úÍ∑∏Ïù∏ Î≥¥Ïû• ÏôÑÎ£å');
        console.log('üìÖ ÎßåÎ£å ÏãúÍ∞Ñ:', thirtyDaysFromNow.toLocaleDateString());
      }
    }
  });

  // üéØ iOS ÏõπÎ∑∞ ÌéòÏù¥ÏßÄ Ïà®ÍπÄ ÏãúÏóêÎèÑ 30Ïùº ÏûêÎèôÎ°úÍ∑∏Ïù∏ Î≥¥Ïû•
  document.addEventListener('visibilitychange', function () {
    if (document.visibilityState === 'hidden') {
      console.log('üîÑ iOS ÏõπÎ∑∞ ÌéòÏù¥ÏßÄ Ïà®ÍπÄ Í∞êÏßÄ - 30Ïùº ÏûêÎèôÎ°úÍ∑∏Ïù∏ Î≥¥Ïû• ÏãúÏûë');

      const keepLogin = localStorage.getItem('keepLoginSetting') === 'true';

      if (keepLogin) {
        const accessToken =
          localStorage.getItem('accessToken') ||
          sessionStorage.getItem('accessToken');
        const refreshToken =
          localStorage.getItem('refreshToken') ||
          sessionStorage.getItem('refreshToken');

        if (accessToken) {
          // localStorageÏóê 30Ïùº ÌÜ†ÌÅ∞ Ï†ÄÏû• Î≥¥Ïû•
          localStorage.setItem('accessToken', accessToken);
          if (refreshToken) {
            localStorage.setItem('refreshToken', refreshToken);
          }
          localStorage.setItem('isLoggedIn', 'true');
          localStorage.setItem('autoLogin', 'true');
          localStorage.setItem('persistentLogin', 'true');
          localStorage.setItem('loginTimestamp', Date.now().toString());

          // 30Ïùº ÎßåÎ£å ÏãúÍ∞Ñ ÏÑ§Ï†ï
          const thirtyDaysFromNow = new Date();
          thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);
          localStorage.setItem(
            'tokenExpiresAt',
            thirtyDaysFromNow.toISOString()
          );

          // iOS Ïï±Ïóê ÌÜ†ÌÅ∞ ÎèôÍ∏∞Ìôî ÏöîÏ≤≠ (ÌéòÏù¥ÏßÄ Ïà®ÍπÄ Ïãú)
          if (window.webkit?.messageHandlers?.nativeBridge) {
            window.webkit.messageHandlers.nativeBridge.postMessage({
              action: 'syncTokenOnHidden',
              token: accessToken,
              refreshToken: refreshToken,
              keepLogin: keepLogin,
            });
            console.log(
              'üçé iOS: ÌéòÏù¥ÏßÄ Ïà®ÍπÄ Ïãú ÎÑ§Ïù¥Ìã∞Î∏å Ïï±Ïóê ÌÜ†ÌÅ∞ ÎèôÍ∏∞Ìôî ÏöîÏ≤≠'
            );
          }

          console.log('üíæ iOS ÏõπÎ∑∞ ÌéòÏù¥ÏßÄ Ïà®ÍπÄ Ïãú 30Ïùº ÏûêÎèôÎ°úÍ∑∏Ïù∏ Î≥¥Ïû• ÏôÑÎ£å');
          console.log('üìÖ ÎßåÎ£å ÏãúÍ∞Ñ:', thirtyDaysFromNow.toLocaleDateString());
        }
      }
    }
  });

  // üéØ iOSÏóêÏÑú ÏïàÏ†ïÏ†ÅÏù∏ Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏
  const checkLoginStatusForIOS = () => {
    try {
      const token = getTokenForIOS();
      const isLoggedIn =
        token &&
        (sessionStorage.getItem('isLoggedIn') === 'true' ||
          localStorage.getItem('isLoggedIn') === 'true');

      console.log('üçé iOS Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏:', {
        hasToken: !!token,
        isLoggedIn: isLoggedIn,
        tokenLength: token?.length || 0,
      });

      return { hasToken: !!token, isLoggedIn, token };
    } catch (error) {
      console.error('üçé iOS Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë Ïò§Î•ò:', error);
      return { hasToken: false, isLoggedIn: false, token: null };
    }
  };

  // üéØ iOSÏóêÏÑú ÏïàÏ†ïÏ†ÅÏù∏ ÏûêÎèôÎ°úÍ∑∏Ïù∏ Î≥µÏõê
  const restoreAutoLoginForIOS = async () => {
    try {
      console.log('üçé iOS: ÏûêÎèôÎ°úÍ∑∏Ïù∏ Î≥µÏõê ÏãúÏûë');

      // 1. ÏßÄÏÜç Î°úÍ∑∏Ïù∏ ÏÑ§Ï†ï ÌôïÏù∏
      const keepLogin =
        sessionStorage.getItem('keepLoginSetting') === 'true' ||
        localStorage.getItem('keepLoginSetting') === 'true';

      if (!keepLogin) {
        console.log('üçé iOS: ÏßÄÏÜç Î°úÍ∑∏Ïù∏ ÏÑ§Ï†ïÏù¥ ÎπÑÌôúÏÑ±ÌôîÎê®');
        return false;
      }

      // 2. ÌòÑÏû¨ ÌÜ†ÌÅ∞ ÏÉÅÌÉú ÌôïÏù∏
      const { hasToken, isLoggedIn, token } = checkLoginStatusForIOS();

      if (!hasToken) {
        console.log('üçé iOS: Ï†ÄÏû•Îêú ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏùå');

        // iOS Ïï±Ïóê ÌÜ†ÌÅ∞ ÏöîÏ≤≠
        if (window.webkit?.messageHandlers?.nativeBridge) {
          console.log('üçé iOS: ÎÑ§Ïù¥Ìã∞Î∏å Ïï±Ïóê ÌÜ†ÌÅ∞ ÏöîÏ≤≠');
          window.webkit.messageHandlers.nativeBridge.postMessage({
            action: 'requestLoginInfo',
          });

          // Ïû†Ïãú ÎåÄÍ∏∞ ÌõÑ Îã§Ïãú ÌôïÏù∏
          await new Promise((resolve) => setTimeout(resolve, 1000));
          const retryToken = getTokenForIOS();
          if (retryToken) {
            console.log('‚úÖ iOS: ÎÑ§Ïù¥Ìã∞Î∏å Ïï±ÏóêÏÑú ÌÜ†ÌÅ∞ ÏàòÏã† ÏÑ±Í≥µ');
            return true;
          }
        }

        return false;
      }

      // 3. ÌÜ†ÌÅ∞ Ïú†Ìö®ÏÑ± ÌôïÏù∏ (Í∞ÑÎã®Ìïú JWT ÌååÏã±)
      try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        const currentTime = Date.now() / 1000;

        if (payload.exp && payload.exp > currentTime) {
          console.log('‚úÖ iOS: Ï†ÄÏû•Îêú ÌÜ†ÌÅ∞Ïù¥ Ïú†Ìö®Ìï® - ÏûêÎèô Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ');
          return true;
        } else {
          console.log('‚ö†Ô∏è iOS: ÌÜ†ÌÅ∞Ïù¥ ÎßåÎ£åÎê®');

          // refreshTokenÏúºÎ°ú Í∞±Ïã† ÏãúÎèÑ
          const refreshToken =
            sessionStorage.getItem('refreshToken') ||
            localStorage.getItem('refreshToken');
          if (refreshToken) {
            console.log('üîÑ iOS: refreshTokenÏúºÎ°ú Í∞±Ïã† ÏãúÎèÑ');
            // Ïó¨Í∏∞ÏÑú Ïã§Ï†ú ÌÜ†ÌÅ∞ Í∞±Ïã† API Ìò∏Ï∂ú
            return false; // ÏûÑÏãúÎ°ú false Î∞òÌôò
          }

          return false;
        }
      } catch (error) {
        console.error('üçé iOS: ÌÜ†ÌÅ∞ ÌååÏã± Ïã§Ìå®:', error);
        return false;
      }
    } catch (error) {
      console.error('üçé iOS ÏûêÎèôÎ°úÍ∑∏Ïù∏ Î≥µÏõê Ï§ë Ïò§Î•ò:', error);
      return false;
    }
  };

  // üéØ ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú ÏûêÎèôÎ°úÍ∑∏Ïù∏ ÏãúÎèÑ
  const setupAutoLoginForIOS = () => {
    try {
      console.log('üçé iOS: ÏûêÎèôÎ°úÍ∑∏Ïù∏ ÏÑ§Ï†ï ÏãúÏûë');

      // 1. ÌéòÏù¥ÏßÄ Î°úÎìú ÏôÑÎ£å ÌõÑ ÏûêÎèôÎ°úÍ∑∏Ïù∏ ÏãúÎèÑ
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          setTimeout(restoreAutoLoginForIOS, 1000);
        });
      } else {
        setTimeout(restoreAutoLoginForIOS, 1000);
      }

      // 2. iOS Ïï±ÏóêÏÑú Î°úÍ∑∏Ïù∏ Ï†ïÎ≥¥ ÏàòÏã† Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
      window.addEventListener('loginInfoReceived', (event) => {
        console.log('üçé iOS: Î°úÍ∑∏Ïù∏ Ï†ïÎ≥¥ ÏàòÏã† Ïù¥Î≤§Ìä∏');
        const { userInfo, keepLogin } = event.detail;

        if (userInfo && userInfo.token) {
          saveTokenForIOS(userInfo.token, userInfo.refreshToken, keepLogin);

          // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ Ïù¥Î≤§Ìä∏ Î∞úÏÉù
          window.dispatchEvent(
            new CustomEvent('iosLoginSuccess', {
              detail: { userInfo, keepLogin },
            })
          );
        }
      });

      // 3. iOS Ïï±ÏóêÏÑú ÌÜ†ÌÅ∞ Í∞±Ïã† Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
      window.addEventListener('tokenRefreshed', (event) => {
        console.log('üçé iOS: ÌÜ†ÌÅ∞ Í∞±Ïã† Ïù¥Î≤§Ìä∏');
        const { tokenData } = event.detail;

        if (tokenData && tokenData.token) {
          saveTokenForIOS(tokenData.token, tokenData.refreshToken, true);

          // ÌÜ†ÌÅ∞ Í∞±Ïã† ÏÑ±Í≥µ Ïù¥Î≤§Ìä∏ Î∞úÏÉù
          window.dispatchEvent(
            new CustomEvent('iosTokenRefreshSuccess', {
              detail: { tokenData },
            })
          );
        }
      });

      console.log('‚úÖ iOS ÏûêÎèôÎ°úÍ∑∏Ïù∏ ÏÑ§Ï†ï ÏôÑÎ£å');
    } catch (error) {
      console.error('üçé iOS ÏûêÎèôÎ°úÍ∑∏Ïù∏ ÏÑ§Ï†ï Ï§ë Ïò§Î•ò:', error);
    }
  };

  // üéØ Ï†ÑÏó≠ Ìï®ÏàòÎ°ú ÎÖ∏Ï∂ú
  window.iOSAutoLogin = {
    saveToken: saveTokenForIOS,
    getToken: getTokenForIOS,
    checkStatus: checkLoginStatusForIOS,
    restore: restoreAutoLoginForIOS,
    setup: setupAutoLoginForIOS,
  };

  // üéØ ÏûêÎèô ÏÑ§Ï†ï ÏãúÏûë
  setupAutoLoginForIOS();

  console.log('üçé iOS ÏõπÎ∑∞ ÏûêÎèôÎ°úÍ∑∏Ïù∏ ÌÜµÌï© Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÑ§Ï†ï ÏôÑÎ£å');
})();
